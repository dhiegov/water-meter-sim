@startuml
' Made with https://planttext.com

class SimController {
  - n_meters : unsigned int
  
  SimController(std::string config_file)
  \\~SimController()
  + startSim(void) : void 
}
SimController "1" *-- "1..n " WaterMeter : - * meters[n]

class WaterMeter {
  - config_path : std::string
  - dir_path : std::string
  - file : std::ifstream
  - update_interval_ms : unsigned int
  - reload_interval_ms : unsigned int

  WaterMeter(std::string config_file)
  \~WaterMeter()
  + startMeter(void) : void
  - update(int time_ms) : void
  - reloadConfig(void) : void
}
WaterMeter *-- "1" Meter : - meter
WaterMeter *-right- "1" MyWindow : - window

class MyWindow {
  # bg_img : MyImage
  # canvas : MyImage
  # digits_pos : int[4]
  
  MyWindow(std::string bg_img_path)
  {abstract} \~MyWindow()
  + {abstract} clearCanvas() : void
  + {abstract} drawDigits(std::string d) : void
  + {abstract} drawMeter(void) : void
  + {abstract} exportCanvasToFile(std::string path) : void
  + {abstract} renderCanvas() : void
  + {abstract} setDigitsPos(int x1, int y1, int x2, int y2) : void
}
note "encapsulates raylib (graphics library)\nsee https://raylib.com" as N1
MyWindow .up. N1

class Meter {
  - count_liters : float
  - ms_passed : unsigned int
  
  Meter(Pipe *in, Pipe *out, int init_count_m3)
  + measureFlow(Pipe *in, Pipe *out, int time_ms) : void
  + count_m3(void) : unsigned int {const}
  + count_mm3(void) : unsigned int {const}
}
Meter *-- "1" Pipe : - *in
Meter *-- "1" Pipe : - *out

class Pipe {
  Pipe(float init_flow, float max_flow)
  # max_flow_rate_lps : float
  # curr_flow_rate_lps : float
  
  + flowLps(void) : float {const}
  + maxFlowLps(void) : float {const}
  + setFlowLps(float f) : void
}
note "LPS = liters per second" as N2
Pipe .right. N2

@enduml